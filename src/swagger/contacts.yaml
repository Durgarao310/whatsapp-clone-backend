openapi: 3.0.0
info:
  title: Realtime Chat API
  version: 1.0.0
  description: API documentation for the Realtime Chat Backend
paths:
  /api/contacts/add:
    post:
      summary: Add a user to contacts (permission to chat)
      tags:
        - Contacts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - contactId
              properties:
                contactId:
                  type: string
                  description: The user ID to add as a contact
      responses:
        200:
          description: Contact added
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                      contactId:
                        type: string
        400:
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
        401:
          description: Unauthorized
        409:
          description: Contact already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
  /api/contacts/remove:
    post:
      summary: Remove a user from contacts
      tags:
        - Contacts
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - contactId
              properties:
                contactId:
                  type: string
                  description: The user ID to remove from contacts
      responses:
        200:
          description: Contact removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                      contactId:
                        type: string
        400:
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
        401:
          description: Unauthorized
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
  /api/contacts/profile:
    get:
      summary: Get the authenticated user's full profile (contacts, friend requests, sent requests)
      tags:
        - Contacts
      security:
        - bearerAuth: []
      responses:
        200:
          description: Full user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          id:
                            type: string
                          username:
                            type: string
                          online:
                            type: boolean
                          socketIds:
                            type: array
                            items:
                              type: string
                          contacts:
                            type: array
                            items:
                              $ref: '#/components/schemas/User'
                          friendRequests:
                            type: array
                            items:
                              $ref: '#/components/schemas/FriendRequest'
                          sentRequests:
                            type: array
                            items:
                              $ref: '#/components/schemas/FriendRequest'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
  /api/contacts/requests:
    get:
      summary: Get pending friend requests (received and sent)
      tags:
        - Contacts
      security:
        - bearerAuth: []
      responses:
        200:
          description: List of pending friend requests
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      received:
                        type: array
                        items:
                          $ref: '#/components/schemas/FriendRequest'
                      sent:
                        type: array
                        items:
                          $ref: '#/components/schemas/FriendRequest'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
# --- Socket.IO Events for Friend Requests ---
x-socketio-events:
  - name: friend_request_received
    direction: server -> client
    description: Emitted to the target user when a friend request is received.
    payload:
      type: object
      properties:
        senderId:
          type: string
        createdAt:
          type: string
          format: date-time
  - name: friend_request_accepted
    direction: server -> client
    description: Emitted to the sender when their friend request is accepted.
    payload:
      type: object
      properties:
        accepterId:
          type: string
  - name: friend_request_rejected
    direction: server -> client
    description: Emitted to the sender when their friend request is rejected.
    payload:
      type: object
      properties:
        rejecterId:
          type: string
  - name: typing
    direction: server -> client
    description: Emitted to a contact when the user is typing a message.
    payload:
      type: object
      properties:
        senderId:
          type: string
  - name: stop_typing
    direction: server -> client
    description: Emitted to a contact when the user stops typing.
    payload:
      type: object
      properties:
        senderId:
          type: string
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    FriendRequest:
      type: object
      properties:
        id:
          type: string
        from:
          $ref: '#/components/schemas/User'
        to:
          $ref: '#/components/schemas/User'
        status:
          type: string
          enum: [pending, accepted, rejected]
        createdAt:
          type: string
          format: date-time
