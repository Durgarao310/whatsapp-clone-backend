openapi: 3.0.0
info:
  title: Realtime Chat API
  version: 1.0.0
  description: API documentation for the Realtime Chat Backend
paths:
  /api/messages:
    get:
      summary: Get messages between the authenticated user and another user
      tags:
        - Messages
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: withUserId
          schema:
            type: string
          required: true
          description: The user ID to get messages with
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          required: false
          description: Number of messages per page (default 20, max 100)
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
          description: Page number (default 1)
      responses:
        200:
          description: Paginated list of messages
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      messages:
                        type: array
                        items:
                          $ref: '#/components/schemas/Message'
                      pagination:
                        type: object
                        properties:
                          total:
                            type: integer
                          page:
                            type: integer
                          limit:
                            type: integer
                          totalPages:
                            type: integer
                          hasNext:
                            type: boolean
                          hasPrevious:
                            type: boolean
        400:
          description: Validation error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
components:
  schemas:
    Message:
      type: object
      properties:
        id:
          type: string
        sender:
          $ref: '#/components/schemas/User'
        receiver:
          $ref: '#/components/schemas/User'
        content:
          type: string
        seen:
          type: boolean
        createdAt:
          type: string
          format: date-time
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        online:
          type: boolean
        socketIds:
          type: array
          items:
            type: string
          nullable: true
securitySchemes:
  bearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
